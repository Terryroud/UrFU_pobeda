from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, BotCommand
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
import os
from dotenv import load_dotenv
from datetime import datetime
import logging
import asyncio
import httpx
from fastapi import FastAPI
import api_requests

load_dotenv()

NAME_INPUT = 1
AUDIT_URL = os.getenv("AUDIT_URL", "http://audit:8004/audit/")

# setting up logs for telegram
class AuditLogHandler(logging.Handler):
    def __init__(self):
        super().__init__()
        self.client = httpx.AsyncClient(timeout=2)

    def emit(self, record):
        log_entry = self.format(record)
        payload = {
            "service": "telegram-bot",
            "level": record.levelname,
            "message": log_entry,
        }
        # Schedule sending in the background
        try:
            loop = asyncio.get_event_loop()
            loop.create_task(self._send_log(payload))
        except RuntimeError:
            # No running event loop (e.g., script exit) ‚Üí fallback
            print(f"[Fallback log] {payload}")

    async def _send_log(self, payload: dict):
        try:
            await self.client.post(AUDIT_URL, json=payload)
        except Exception as e:
            print(f"Failed to send log to audit service: {e}")
            print(f"Original log: {payload}")

    async def aclose(self):
        """Close the httpx client gracefully on shutdown."""
        await self.client.aclose()

logger = logging.getLogger()
logger.setLevel(logging.DEBUG)

# use our async audit handler
audit_handler = AuditLogHandler()
audit_handler.setLevel(logging.INFO)
formatter = logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s")
audit_handler.setFormatter(formatter)

logger.addHandler(audit_handler)

logger.info("Bot is starting...")

class ExcludeLibrariesFilter(logging.Filter):
    def filter(self, record):
        # don‚Äôt forward logs from these modules
        excluded = ["httpx"]
        return not any(record.name.startswith(lib) for lib in excluded)

audit_handler.addFilter(ExcludeLibrariesFilter())

# –ò–º–ø–æ—Ä—Ç –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è

TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')

app = FastAPI(title="Orchestator", docs_url=None, redoc_url=None, openapi_url=None)

# telegram bot handle functions

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
    api_requests.add_user( 
        user_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name
    )

    keyboard = [
        [InlineKeyboardButton("‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω(-–Ω–∞)", callback_data="accept_terms")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    terms_text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
        "–û–∑–Ω–∞–∫–æ–º—å—Å—è —Å [–ü—Ä–∞–≤–∏–ª–∞–º–∏](https://github.com/Terryroud/UrFU_pobeda/blob/main/Privacy_Policy.md) "
        "–∏ [–°–æ–≥–ª–∞—Å–∏–µ–º](https://github.com/Terryroud/UrFU_pobeda/blob/main/Agreement.md) "
        "–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å."
    )

    await update.message.reply_text(
        terms_text,
        reply_markup=reply_markup,
        parse_mode='Markdown',
        disable_web_page_preview=True
    )


async def handle_terms_acceptance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–≥–ª–∞—Å–∏—è"""
    query = update.callback_query
    await query.answer()

    # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    await query.edit_message_text("‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ü—Ä–∏—Å—Ç—É–ø–∞–µ–º –∫ –º–∞–≥–∏–∏!")

    user_id = query.from_user.id
    user_name = api_requests.get_user_name(user_id) 

    if user_name:
        # –ï—Å–ª–∏ –∏–º—è —É–∂–µ –µ—Å—Ç—å
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text=f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user_name}! –û —á–µ–º —Ö–æ—á–µ—à—å –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å?"
        )
    else:
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text=(
                "–ü—Ä–∏–≤–µ—Ç! –Ø –ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä. –î–∞-–¥–∞, —Ç–æ—Ç —Å–∞–º—ã–π)\n"
                "–î–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?"
            )
        )
        return NAME_INPUT


async def change_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏"""
    await update.message.reply_text(
        "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? –í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∏–º—è:"
    )
    return NAME_INPUT


async def handle_name_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏"""
    user = update.effective_user
    user_message = update.message.text

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    api_requests.update_user_name(user.id, user_message) 

    await update.message.reply_text(
        f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {user_message}! üòä\n"
        "–¢–µ–ø–µ—Ä—å —è –º–æ–≥—É –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ —Ç–µ–±–µ –ø–æ –∏–º–µ–Ω–∏.\n\n"
        "–û —á–µ–º —Ö–æ—á–µ—à—å —Å–µ–≥–æ–¥–Ω—è –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å?)"
    )

    return -1


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user = update.effective_user
    user_message = update.message.text

    api_requests.add_user( 
        user_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name
    )

    user_name = api_requests.get_user_name(user.id) 

    if not user_message.strip():
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å, –≤ –≤–æ–ª—à–µ–±–Ω–æ–º –º–∏—Ä–µ –ø–æ–∫–∞ –Ω–µ –Ω–∞—É—á–∏–ª–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏ –∏ —Å—Ç–∏–∫–µ—Ä–∞–º–∏((")
        return

    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "–ø–µ—á–∞—Ç–∞–µ—Ç"
        await context.bot.send_chat_action(
            chat_id=update.effective_chat.id,
            action="typing"
        )

        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        conversation_history = api_requests.get_history(user.id, limit=50) 

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        contextual_message = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name or 'User'}\n"
        if conversation_history:
            contextual_message += f"–ò—Å—Ç–æ—Ä–∏—è:\n{conversation_history}\n\n"
        contextual_message += f"–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å: {user_message}"

        # –î–∞–Ω–Ω—ã–µ –∏–∑ –±–¥ –¥–ª—è response
        chat_history = api_requests.get_history(user.id) 
        user_name = api_requests.get_user_name(user.id) 

        # –î–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ RAG –¥–ª—è response
        rag_answer = api_requests.rag_request(user_message)

        # –î–∞–Ω–Ω—ã–µ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞ –¥–ª—è response
        is_invalid, valid_stat = api_requests.analyze_text(user_message)

        response = api_requests.agent_request(user_message, chat_history, user_name, rag_answer, is_invalid, valid_stat)
        
        if not response:
            response = "–ò–∑–≤–∏–Ω–∏, —è –Ω–µ –º–æ–≥—É –æ–±—Å—É–∂–¥–∞—Ç—å —Ç–∞–∫–∏–µ —Ç–µ–º—ã, –∏–Ω–∞—á–µ –¥–µ–º–µ–Ω—Ç–æ—Ä—ã –≤—ã—Å–æ—Å—É—Ç –∏–∑ –º–µ–Ω—è –¥—É—à—É(("

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–≤–µ—Ç
        api_requests.add_message(user.id, user_message, response)

        await update.message.reply_text(response)

    except Exception as e:
        api_requests.audit_log("orchestrator", "ERROR", f"Error handling message: {str(e)}")
        await update.message.reply_text(
            "–ò–∑–≤–∏–Ω–∏, —è —É—Å—Ç–∞–ª –∏ –Ω–µ —Å–º–æ–≥—É —Å–µ–π—á–∞—Å –æ—Ç–≤–µ—Ç–∏—Ç—å —Ç–µ–±–µ. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ"
        )


async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    keyboard = [
        [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", callback_data="change_name")],
        [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data="delete_account")],
        [InlineKeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="about")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )


async def handle_menu_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "change_name":
        # –ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞, –∞ –Ω–µ callback query
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text="–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? –í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∏–º—è:"
        )
        return NAME_INPUT

    elif query.data == "about":
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text="–Ø –ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä! –ò —É –º–µ–Ω—è –µ—Å—Ç—å –∂–µ–Ω–∞((("
        )

    elif query.data == "delete_account":  # –ù–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö
        user_id = query.from_user.id
        api_requests.delete_user_data(user_id) 

        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text="‚úÖ –í—Å–µ —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã! –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞.\n\n"
                 "–ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –ø–æ–æ–±—â–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞ - –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ üòä"
        )


async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    audit_log("orchestrator", "ERROR", f"Update {update} caused error {context.error}")
    if update and update.effective_message:
        await update.effective_message.reply_text(
            "–ò–∑–≤–∏–Ω–∏, —è —É—Å—Ç–∞–ª –∏ –Ω–µ —Å–º–æ–≥—É —Å–µ–π—á–∞—Å –æ—Ç–≤–µ—Ç–∏—Ç—å —Ç–µ–±–µ. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ"
        )


@app.on_event("startup")
async def on_startup():
    try:
        application = Application.builder().token(TELEGRAM_TOKEN).build()

        from telegram.ext import ConversationHandler

        conv_handler = ConversationHandler(
            entry_points=[
                CallbackQueryHandler(handle_terms_acceptance, pattern="^accept_terms$"),
                CommandHandler("change_name", change_name)  # –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏
            ],
            states={
                NAME_INPUT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_name_input)]
            },
            fallbacks=[CommandHandler("cancel", lambda u, c: ConversationHandler.END)]
        )

        application.add_handler(conv_handler)
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("menu", menu))  # –î–û–ë–ê–í–¨–¢–ï –≠–¢–£ –°–¢–†–û–ö–£
        application.add_handler(CallbackQueryHandler(handle_menu_buttons, pattern="^(change_name|about|delete_account)$"))  # –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ü–ê–¢–¢–ï–†–ù

        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        application.add_error_handler(error_handler)

        # –ù–ê–°–¢–†–û–ô–ö–ê –ö–û–ú–ê–ù–î –ë–û–¢–ê
        async def post_init(application: Application):
            await application.bot.set_my_commands([
                BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
                BotCommand("menu", "–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –∫–æ–º–∞–Ω–¥"),
            ])
        application.post_init = post_init 
        
        await application.initialize()
        await application.start()
        await application.updater.start_polling()

        api_requests.audit_log("orchestrator", "INFO", "Bot is running...")
    except Exception as e:
        api_requests.audit_log("orchestrator", "ERROR", f"Failed to start bot: {str(e)}")

@app.get("/")
def root():
    return {"status": "ok", "message": "FastAPI is running with Telegram bot"}


