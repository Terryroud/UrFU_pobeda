from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, BotCommand
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
import os
from dotenv import load_dotenv
import httpx

NAME_INPUT = 1

# –ò–º–ø–æ—Ä—Ç –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
ORCHESTRATOR_URL = os.getenv('ORCHESTRATOR_URL', 'http://orchestrator:8000')


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user

    keyboard = [
        [InlineKeyboardButton("‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω(-–Ω–∞)", callback_data="accept_terms")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    terms_text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
        "–û–∑–Ω–∞–∫–æ–º—å—Å—è —Å [–ü—Ä–∞–≤–∏–ª–∞–º–∏](https://github.com/Terryroud/UrFU_pobeda/blob/main/Privacy_Policy.md) "
        "–∏ [–°–æ–≥–ª–∞—Å–∏–µ–º](https://github.com/Terryroud/UrFU_pobeda/blob/main/Agreement.md) "
        "–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å."
    )

    await update.message.reply_text(
        terms_text,
        reply_markup=reply_markup,
        parse_mode='Markdown',
        disable_web_page_preview=True
    )

async def handle_terms_acceptance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–≥–ª–∞—Å–∏—è"""
    query = update.callback_query
    await query.answer()

    # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    await query.edit_message_text("‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ü—Ä–∏—Å—Ç—É–ø–∞–µ–º –∫ –º–∞–≥–∏–∏!")

    callback_data = {
        'user_id': query.from_user.id,
        'callback_data': "accept_terms",
        'chat_id': query.message.chat_id
    }

    async with httpx.AsyncClient() as client:
        try:
            response = await client.post(f"{ORCHESTRATOR_URL}/handle-callback", json=callback_data)
            if response.status_code == 200:
                result = response.json()
                await context.bot.send_message(chat_id=query.message.chat_id, text=result['response'])
        except Exception as e:
            await context.bot.send_message(chat_id=query.message.chat_id, text=f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")

async def change_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏"""
    await update.message.reply_text(
        "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? –í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∏–º—è:"
    )
    return NAME_INPUT

async def handle_name_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏"""
    user = update.effective_user
    user_message = update.message.text

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–º–µ–Ω–∏
    callback_data = {
        'user_id': user.id,
        'callback_data': f"update_name:{user_message}",
        'chat_id': update.effective_chat.id
    }

    async with httpx.AsyncClient() as client:
        try:
            response = await client.post(f"{ORCHESTRATOR_URL}/handle-callback", json=callback_data)
            if response.status_code == 200:
                result = response.json()
                await update.message.reply_text(result['response'])
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")

    return -1


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_message = update.message.text

    if not user_message.strip():
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å, –≤ –≤–æ–ª—à–µ–±–Ω–æ–º –º–∏—Ä–µ –ø–æ–∫–∞ –Ω–µ –Ω–∞—É—á–∏–ª–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏ –∏ —Å—Ç–∏–∫–µ—Ä–∞–º–∏((")
        return

    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "–ø–µ—á–∞—Ç–∞–µ—Ç"
        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
        message_data = {
            'user_id': user.id,
            'username': user.username,
            'first_name': user.first_name,
            'last_name': user.last_name,
            'message': user_message,
            'chat_id': update.effective_chat.id
        }

        async with httpx.AsyncClient() as client:
            response = await client.post(f"{ORCHESTRATOR_URL}/handle-message", json=message_data)
            if response.status_code == 200:
                result = response.json()
                await update.message.reply_text(result['response'])
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")

    except Exception as e:
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏, —è —É—Å—Ç–∞–ª –∏ –Ω–µ —Å–º–æ–≥—É —Å–µ–π—á–∞—Å –æ—Ç–≤–µ—Ç–∏—Ç—å —Ç–µ–±–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ")


async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", callback_data="change_name")],
        [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data="delete_account")],
        [InlineKeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="about")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)


async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    keyboard = [
        [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", callback_data="change_name")],
        [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data="delete_account")],
        [InlineKeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="about")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )


async def handle_menu_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    callback_data = {
        'user_id': query.from_user.id,
        'callback_data': query.data,
        'chat_id': query.message.chat_id
    }

    async with httpx.AsyncClient() as client:
        try:
            response = await client.post(f"{ORCHESTRATOR_URL}/handle-callback", json=callback_data)
            if response.status_code == 200:
                result = response.json()
                if query.data == "change_name":
                    await context.bot.send_message(chat_id=query.message.chat_id, text=result['response'])
                else:
                    await query.edit_message_text(result['response'])
        except Exception as e:
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update and update.effective_message:
        await update.effective_message.reply_text("–ò–∑–≤–∏–Ω–∏, —è —É—Å—Ç–∞–ª –∏ –Ω–µ —Å–º–æ–≥—É —Å–µ–π—á–∞—Å –æ—Ç–≤–µ—Ç–∏—Ç—å —Ç–µ–±–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        application = Application.builder().token(TELEGRAM_TOKEN).build()

        from telegram.ext import ConversationHandler

        conv_handler = ConversationHandler(
            entry_points=[
                CallbackQueryHandler(handle_terms_acceptance, pattern="^accept_terms$"),
                CommandHandler("change_name", change_name)  # –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏
            ],
            states={
                NAME_INPUT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_name_input)]
            },
            fallbacks=[CommandHandler("cancel", lambda u, c: ConversationHandler.END)]
        )

        application.add_handler(conv_handler)
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("menu", menu))
        application.add_handler(CallbackQueryHandler(handle_menu_buttons, pattern="^(change_name|about|delete_account)$"))  # –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ü–ê–¢–¢–ï–†–ù

        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        application.add_error_handler(error_handler)

        async def post_init(application: Application):
            await application.bot.set_my_commands([
                BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
                BotCommand("menu", "–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –∫–æ–º–∞–Ω–¥"),
            ])

        application.post_init = post_init

        application.run_polling()

    except Exception as e:
        print(f"Failed to start bot: {str(e)}")

if __name__ == "__main__":
    main()
