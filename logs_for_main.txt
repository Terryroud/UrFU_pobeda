class AuditLogHandler(logging.Handler):
    def __init__(self):
        super().__init__()
        self.client = httpx.AsyncClient(timeout=2)

    def emit(self, record):
        log_entry = self.format(record)
        payload = {
            "service": "telegram-bot",
            "level": record.levelname,
            "message": log_entry,
        }
        # Schedule sending in the background
        try:
            loop = asyncio.get_event_loop()
            loop.create_task(self._send_log(payload))
        except RuntimeError:
            # No running event loop (e.g., script exit) â†’ fallback
            print(f"[Fallback log] {payload}")

    async def _send_log(self, payload: dict):
        try:
            await self.client.post(AUDIT_URL, json=payload)
        except Exception as e:
            print(f"Failed to send log to audit service: {e}")
            print(f"Original log: {payload}")

    async def aclose(self):
        """Close the httpx client gracefully on shutdown."""
        await self.client.aclose()

logger = logging.getLogger("telegram-bot")
logger.setLevel(logging.DEBUG)

# use our async audit handler
audit_handler = AuditLogHandler()
audit_handler.setLevel(logging.INFO)
formatter = logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s")
audit_handler.setFormatter(formatter)

logger.addHandler(audit_handler)

logger.info("Bot is starting...")