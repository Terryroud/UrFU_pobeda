from fastapi import FastAPI, HTTPException
import httpx
import os
from pydantic import BaseModel

app = FastAPI(title="Orchestrator Service")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
SERVICES = {
    'rag': os.getenv('RAG_URL', 'http://rag_service:8001'),
    'ai': os.getenv('AI_URL', 'http://ai_service:8002'),
    'security': os.getenv('SECURITY_URL', 'http://heuristic_service:8003'),
    'database_service': os.getenv('DATABASE_URL', 'http://database_service:8004'),
    'audit_service': os.getenv('AUDIT_URL', 'http://audit_service:8005')
}


class MessageRequest(BaseModel):
    user_id: int
    username: str = None
    first_name: str = None
    last_name: str = None
    message: str
    chat_id: int


class CallbackRequest(BaseModel):
    user_id: int
    callback_data: str
    chat_id: int


class UserData(BaseModel):
    user_id: int
    username: str = None
    first_name: str = None
    last_name: str = None

async def audit_log(service: str, level: str, message: str, user_id: int = None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–≥–∞ –≤ audit service —á–µ—Ä–µ–∑ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä"""
    try:
        async with httpx.AsyncClient() as client:
            log_data = {
                "service": service,
                "level": level,
                "message": message,
                "user_id": user_id
            }
            await client.post(f"{SERVICES['audit']}/log", json=log_data, timeout=5)
    except Exception as e:
        # –§–æ–ª–±—ç–∫: –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å –µ—Å–ª–∏ audit service –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        print(f"[FALLBACK {level}] {service}: {message}")

@app.post("/handle-message")
async def handle_message(request: MessageRequest):
    try:
        await audit_log("orchestrator", "INFO", f"Starting message processing", request.user_id)

        async with httpx.AsyncClient() as client:
            # 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data = UserData(
                user_id=request.user_id,
                username=request.username,
                first_name=request.first_name,
                last_name=request.last_name
            )
            await client.post(f"{SERVICES['database_service']}/users", json=user_data.dict())
            await audit_log("database", "INFO", f"User updated", request.user_id)

            # 2. –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_response = await client.get(f"{SERVICES['database_service']}/users/{request.user_id}")
            user_data = user_response.json()
            user_name = user_data.get('user_name', 'User')

            # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
            safety_response = await client.post(
                f"{SERVICES['security']}/check-safety",
                json={'text': request.message}
            )
            safety_data = safety_response.json()
            await audit_log("security", "INFO", f"Safety check completed", request.user_id)

            if safety_data.get('is_invalid', False):
                await audit_log("security", "WARNING", f"Unsafe message detected: {request.message}", request.user_id)
                return {
                    'response': "–ò–∑–≤–∏–Ω–∏, —è –Ω–µ –º–æ–≥—É –æ–±—Å—É–∂–¥–∞—Ç—å —Ç–∞–∫–∏–µ —Ç–µ–º—ã, –∏–Ω–∞—á–µ –¥–µ–º–µ–Ω—Ç–æ—Ä—ã –≤—ã—Å–æ—Å—É—Ç –∏–∑ –º–µ–Ω—è –¥—É—à—É(((",
                    'status': 'success'
                }

            # 4. –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–ø–∏—Å–∫–∏
            history_response = await client.get(
                f"{SERVICES['database_service']}/conversation-history/{request.user_id}",
                params={'limit': 50}
            )
            chat_history = history_response.json().get('history', '')

            # 5. –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ RAG
            rag_response = await client.get(
                f"{SERVICES['rag']}/query",
                params={'question': request.message}
            )
            rag_data = rag_response.json()
            await audit_log("rag", "INFO", f"RAG context retrieved", request.user_id)

            # 6. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ AI
            ai_request = {
                'message': request.message,
                'chat_history': chat_history,
                'user_name': user_name,
                'rag_context': rag_data.get('answer', ''),
                'is_invalid': safety_data.get('is_invalid', False),
                'valid_stat': safety_data.get('valid_stat', {})
            }

            ai_response = await client.post(
                f"{SERVICES['ai']}/generate",
                json=ai_request
            )
            ai_data = ai_response.json()
            response_text = ai_data.get('response', '')
            await audit_log("ai", "INFO", f"Response generated", request.user_id)

            if not response_text:
                response_text = "–ò–∑–≤–∏–Ω–∏, —è –Ω–µ –º–æ–≥—É –æ–±—Å—É–∂–¥–∞—Ç—å —Ç–∞–∫–∏–µ —Ç–µ–º—ã, –∏–Ω–∞—á–µ –¥–µ–º–µ–Ω—Ç–æ—Ä—ã –≤—ã—Å–æ—Å—É—Ç –∏–∑ –º–µ–Ω—è –¥—É—à—É((("
                await audit_log("ai", "WARNING", "Empty response generated", request.user_id)

            # 7. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
            await client.post(f"{SERVICES['database_service']}/messages", json={
                'user_id': request.user_id,
                'user_message': request.message,
                'bot_response': response_text
            })

            await audit_log("database", "INFO", "Message saved to history", request.user_id)

            await audit_log("orchestrator", "INFO", "Message processing completed", request.user_id)

            return {
                'response': response_text,
                'status': 'success'
            }

    except Exception as e:
        await audit_log("orchestrator", "ERROR", f"Error handling message: {str(e)}", request.user_id)
        return {
            'response': "–ò–∑–≤–∏–Ω–∏, —è —É—Å—Ç–∞–ª –∏ –Ω–µ —Å–º–æ–≥—É —Å–µ–π—á–∞—Å –æ—Ç–≤–µ—Ç–∏—Ç—å —Ç–µ–±–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ",
            'status': 'error'
        }


@app.post("/handle-callback")
async def handle_callback(request: CallbackRequest):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–Ω–æ–ø–æ–∫"""
    try:
        await audit_log("orchestrator", "INFO", f"Processing callback: {request.callback_data}", request.user_id)

        async with httpx.AsyncClient() as client:
            if request.callback_data == "delete_account":
                # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await client.delete(f"{SERVICES['database_service']}/users/{request.user_id}")
                response_text = "‚úÖ –í—Å–µ —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã! –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞.\n\n–ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –ø–æ–æ–±—â–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞ - –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ üòä"
                await audit_log("database", "INFO", "User data deleted", request.user_id)

            elif request.callback_data == "change_name":
                response_text = "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? –í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∏–º—è:"

            elif request.callback_data == "about":
                response_text = "–Ø –ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä! –ò —É –º–µ–Ω—è –µ—Å—Ç—å –∂–µ–Ω–∞((("

            elif request.callback_data == "accept_terms":
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∏–º—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_response = await client.get(f"{SERVICES['database_service']}/users/{request.user_id}")
                user_data = user_response.json()

                if user_data.get('user_name'):
                    response_text = f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user_data['user_name']}! –û —á–µ–º —Ö–æ—á–µ—à—å –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å?"
                else:
                    response_text = "–ü—Ä–∏–≤–µ—Ç! –Ø –ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä. –î–∞-–¥–∞, —Ç–æ—Ç —Å–∞–º—ã–π)\n–î–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?"

            else:
                response_text = "‚úÖ"

            await audit_log("orchestrator", "INFO", f"Callback processed: {request.callback_data}", request.user_id)

            return {
                'response': response_text,
                'status': 'success'
            }

    except Exception as e:
        await audit_log("orchestrator", "ERROR", f"Error processing callback: {str(e)}")
        return {
            'response': "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞",
            'status': 'error'
        }


@app.get("/health")
async def health_check():
    return {"status": "healthy", "service": "orchestrator"}


if __name__ == "__main__":
    import uvicorn

    uvicorn.run(app, host="0.0.0.0", port=8000)